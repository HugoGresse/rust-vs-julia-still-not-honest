name: Fibonacci Benchmarks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  benchmark-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t fib-benchmarks .

      - name: Run benchmarks in Docker
        run: |
          docker run --name fib-benchmark-container fib-benchmarks
          docker cp fib-benchmark-container:/app/benchmark_results.csv .
          docker cp fib-benchmark-container:/app/benchmark_table.md .

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-linux
          path: |
            benchmark_results.csv
            benchmark_table.md

  benchmark-macos-arm:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Try patched Lima approach
        id: lima
        continue-on-error: true
        run: |
          # Install Docker and related tools
          brew install docker docker-buildx colima lima

          # Get patched Lima binary that works without hardware virtualization
          LIMA_PATH=$(brew --prefix)/bin/limactl
          sudo curl -L -o $LIMA_PATH https://github.com/mikekazakov/lima-nohvf/raw/master/limactl
          sudo chmod +x $LIMA_PATH

          # Start Colima with QEMU emulation (no need for hardware virtualization)
          colima start --arch arm64 --vm-type=qemu --network-address

          # Set up Docker BuildX
          mkdir -p ~/.docker/cli-plugins
          ln -sfn $(brew --prefix)/opt/docker-buildx/bin/docker-buildx ~/.docker/cli-plugins/docker-buildx

          # Build Docker image and run benchmarks
          docker build -t fib-benchmarks .
          docker run --name fib-benchmark-container fib-benchmarks
          docker cp fib-benchmark-container:/app/benchmark_results.csv .
          docker cp fib-benchmark-container:/app/benchmark_table.md .

          echo "LIMA_SUCCESS=true" >> $GITHUB_OUTPUT

      - name: Fallback to native compilation
        if: steps.lima.outcome != 'success' || steps.lima.outputs.LIMA_SUCCESS != 'true'
        run: |
          # Install necessary language compilers and interpreters
          brew install go rust julia python gcc node openjdk@17

          # Make sure Java is properly set up
          echo "JAVA_HOME=$(/usr/libexec/java_home -v 17)" >> $GITHUB_ENV

          # Run benchmarks natively
          ./run_benchmarks.sh --no-docker --runs 3

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-macos-arm
          path: |
            benchmark_results.csv
            benchmark_table.md

  summarize-results:
    needs: [benchmark-linux, benchmark-macos-arm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-linux
          path: linux-results

      - name: Download macOS ARM results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-macos-arm
          path: macos-results

      - name: Generate combined report
        run: |
          echo "# Benchmark Results" > combined_results.md
          echo "" >> combined_results.md
          echo "## Linux Results" >> combined_results.md
          echo "" >> combined_results.md
          cat linux-results/benchmark_table.md >> combined_results.md
          echo "" >> combined_results.md
          echo "## macOS ARM Results" >> combined_results.md
          echo "" >> combined_results.md
          cat macos-results/benchmark_table.md >> combined_results.md

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: combined-benchmark-results
          path: combined_results.md
